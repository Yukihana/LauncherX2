// Generated by .NET Reflector from D:\Projects\_labs\LauncherX.exe
namespace TrayMenuMini2
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Windows.Forms;
    
    public class flib
    {
        [return: MarshalAs(UnmanagedType.U1)]
        public static bool CreateFile(string iPath)
        {
            StreamWriter writer = null;
            if (!File.Exists(iPath))
            {
                bool flag = false;
                writer = new StreamWriter(iPath);
                writer.Close();
                while (!flag)
                {
                    if (File.Exists(iPath))
                    {
                        flag = true;
                    }
                    else if (MessageBox.Show("Error Creating File. Retry?\r\n" + iPath, "Confirmation", MessageBoxButtons.RetryCancel, MessageBoxIcon.Hand) == DialogResult.Cancel)
                    {
                        flag = true;
                    }
                    else
                    {
                        writer = new StreamWriter(iPath);
                    }
                    writer.Close();
                }
            }
            return File.Exists(iPath);
        }
        
        public static string EscapeArgString(string vArg)
        {
            string str = null;
            string str2;
            int num2 = -1;
            int num3 = -1;
            str = string.Empty;
            for (int i = 0; i < vArg.Length; i++)
            {
                string str3 = (vArg[i] != '"') ? vArg[i].ToString() : "\"\"";
                str = str + str3;
                if ((num2 == -1) && (str[str.Length - 1] == '='))
                {
                    num2 = str.Length - 1;
                }
                if ((num3 == -1) && (str[str.Length - 1] == ' '))
                {
                    num3 = str.Length - 1;
                }
            }
            if (num3 == -1)
            {
                str2 = str;
            }
            else
            {
                str = str.PadRight(str.Length + 1, '"');
                str2 = ((num2 == -1) || (num3 < num2)) ? str.PadLeft(str.Length + 1, '"') : str.Insert(num2 + 1, "\"");
            }
            return str2;
        }
        
        public static List<string> LoadFromFile(string iPath)
        {
            string item = null;
            StreamReader reader = null;
            List<string> list = null;
            CreateFile(iPath);
            list = new List<string>(0);
            reader = new StreamReader(iPath);
            item = string.Empty;
            while (true)
            {
                item = reader.ReadLine();
                if (item == null)
                {
                    reader.Close();
                    return list;
                }
                if (item != string.Empty)
                {
                    list.Add(item);
                }
            }
        }
        
        public static string MergeData(string iName, string iCategory, string iPath, string iArgs)
        {
            List<string> list = null;
            string str = null;
            if (iName == string.Empty)
            {
                iName = Path.GetFileNameWithoutExtension(iPath);
            }
            if (iCategory == string.Empty)
            {
                iCategory = "Other";
            }
            iName = iName.Replace(":", "_");
            iCategory = iCategory.Replace(":", "_");
            str = (iName + ":") + iCategory + ":";
            list = new List<string>(0) {
                iPath
            };
            list.AddRange(ToArgArray(iArgs));
            return (str + ToCmdLine(list.ToArray()));
        }
        
        public static void SaveToFile(string iPath, List<string> iData)
        {
            StreamWriter writer = null;
            string current = null;
            if (CreateFile(iPath))
            {
                writer = new StreamWriter(iPath, false);
                List<string>.Enumerator enumerator = iData.GetEnumerator();
                while (true)
                {
                    if (!enumerator.MoveNext())
                    {
                        writer.Close();
                        break;
                    }
                    current = enumerator.Current;
                    writer.WriteLine(current);
                }
            }
        }
        
        public static string[] SplitData(string iText)
        {
            List<string> list = null;
            string[] strArray = null;
            string[] strArray2;
            strArray = new string[4];
            list = new List<string>(0);
            char[] separator = new char[] { ':' };
            list.AddRange(iText.Split(separator));
            if (list.Count < 3)
            {
                strArray2 = new string[0];
            }
            else
            {
                strArray[0] = list[0];
                strArray[1] = list[1];
                list.Clear();
                list.AddRange(ToArgArray(iText.Substring((list[0].Length + list[1].Length) + 2)));
                if (list.Count < 1)
                {
                    strArray2 = new string[0];
                }
                else
                {
                    strArray[2] = list[0];
                    string str = (list.Count <= 1) ? string.Empty : ToCmdLine(list.GetRange(1, list.Count - 1).ToArray());
                    strArray[3] = str;
                    strArray2 = strArray;
                }
            }
            return strArray2;
        }
        
        public static string[] ToArgArray(string vCmdLine)
        {
            string[] strArray = null;
            string[] strArray2 = null;
            string[] strArray3;
            char[] trimChars = new char[] { ' ' };
            if (vCmdLine.Trim(trimChars) == string.Empty)
            {
                strArray3 = new string[0];
            }
            else
            {
                int index = 0;
                int num = 0;
                bool flag2 = false;
                bool flag = false;
                strArray = new string[vCmdLine.Length];
                num = 0;
                while (true)
                {
                    if (num >= strArray.Length)
                    {
                        num = 0;
                        while (true)
                        {
                            if (num >= vCmdLine.Length)
                            {
                                if (strArray[index] == string.Empty)
                                {
                                    index--;
                                }
                                strArray2 = new string[index + 1];
                                num = 0;
                                while (true)
                                {
                                    if (num > index)
                                    {
                                        strArray3 = strArray2;
                                        break;
                                    }
                                    strArray2[num] = strArray[num];
                                    num++;
                                }
                                break;
                            }
                            if (flag2)
                            {
                                if ((num != (vCmdLine.Length - 1)) && (vCmdLine.Substring(num, 2) == "\"\""))
                                {
                                    strArray[index] = strArray[index] + "\"";
                                    num++;
                                }
                                else if (vCmdLine[num] == '"')
                                {
                                    flag2 = false;
                                }
                                else
                                {
                                    strArray[index] = strArray[index] + vCmdLine[num];
                                }
                            }
                            else if (vCmdLine[num] != ' ')
                            {
                                if (vCmdLine[num] == '"')
                                {
                                    flag2 = true;
                                }
                                else
                                {
                                    strArray[index] = strArray[index] + vCmdLine[num];
                                }
                            }
                            else
                            {
                                flag = true;
                                if (num == 0)
                                {
                                    flag = false;
                                }
                                else if (vCmdLine[num - 1] == ' ')
                                {
                                    flag = false;
                                }
                                if (flag)
                                {
                                    index++;
                                }
                            }
                            num++;
                        }
                        break;
                    }
                    strArray[num] = string.Empty;
                    num++;
                }
            }
            return strArray3;
        }
        
        public static string ToCmdLine(string[] vArgArray)
        {
            string str = null;
            try
            {
            }
            catch (Exception exception1)
            {
                IDisposable disposable = exception1 as IDisposable;
                if (disposable != null)
                {
                    disposable.Dispose();
                }
                return string.Empty;
            }
            str = string.Empty;
            if (vArgArray.Length > 0)
            {
                str = EscapeArgString(vArgArray[0]);
            }
            if (vArgArray.Length > 1)
            {
                for (int i = 1; i < vArgArray.Length; i++)
                {
                    str = str + " " + EscapeArgString(vArgArray[i]);
                }
            }
            vArgArray = null;
            return str;
        }
    }
}
